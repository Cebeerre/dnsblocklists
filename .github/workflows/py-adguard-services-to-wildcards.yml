name: Build AdGuard services -> wildcard lists

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install pyyaml requests

      - name: Build lists, extract icons, write SERVICES.md and update README rows
        run: |
          python <<'EOF'
          import os, re, pathlib, hashlib, requests, yaml

          BASE = "https://raw.githubusercontent.com/AdguardTeam/HostlistsRegistry/main/services"
          REPO_BASE = "https://Cebeerre.github.io/dnsblocklists"
          CHECKSUM_DIR = pathlib.Path(".checksums")
          CHECKSUM_DIR.mkdir(exist_ok=True)

          outdir = pathlib.Path("webservices")
          outdir.mkdir(exist_ok=True)
          icons_dir = pathlib.Path("icons")
          icons_dir.mkdir(exist_ok=True)

          # fetch index
          resp = requests.get("https://api.github.com/repos/AdguardTeam/HostlistsRegistry/contents/services")
          resp.raise_for_status()
          entries = [e for e in resp.json() if e["name"].endswith(".yaml")]

          services = []
          for entry in entries:
              service = entry["name"].replace(".yaml", "")
              url = f"{BASE}/{entry['name']}"
              r = requests.get(url)
              r.raise_for_status()
              raw = r.text

              # checksum check
              sha = hashlib.sha256(raw.encode("utf-8")).hexdigest()
              checksum_file = CHECKSUM_DIR / f"{service}.sha256"
              if checksum_file.exists() and checksum_file.read_text() == sha:
                  print(f"Skipping {service}, no changes.")
                  continue
              checksum_file.write_text(sha)

              data = yaml.safe_load(raw)
              services.append((service, data))

              # build .txt
              txtfile = outdir / f"{service}_asterisk.txt"
              domains = []
              skipped = []

              for rule in data.get("rules", []):
                  if rule.startswith("||") and rule.endswith("^"):
                      d = rule[2:-1]
                      if "." in d and not any(c in d for c in " /\\:*?\"'<>|"):
                          domains.append(f"*.{d}")
                      else:
                          skipped.append(rule)
                  else:
                      skipped.append(rule)

              domains = sorted(set(domains))

              with open(txtfile, "w", encoding="utf-8") as f:
                  f.write("# Syntax: Domains Wildcard - Blocky (v0.23 or newer)\n")
                  f.write(f"# Title: {data.get('name','')}\n")
                  f.write("# Description: Converted from AdGuard HostlistsRegistry\n")
                  f.write("# Homepage: https://github.com/Cebeerre/dnsblocklists\n")
                  f.write("# License: MIT (same as wrapper repo)\n")
                  f.write(f"# Original Source: {url}\n")
                  f.write(f"# Entries: {len(domains)}\n")
                  f.write("#\n")
                  if skipped:
                      f.write("# Skipped unsupported rules:\n")
                      for r in skipped:
                          f.write(f"# {r}\n")
                      f.write("#\n")
                  for d in domains:
                      f.write(d + "\n")

              print(f"Wrote {txtfile} ({len(domains)} entries, {len(skipped)} skipped)")

              # save icon
              icon_svg = data.get("icon_svg")
              if icon_svg:
                  with open(icons_dir / f"{service}.svg", "w", encoding="utf-8") as f:
                      f.write(icon_svg)

          # rebuild SERVICES.md
          with open("SERVICES.md", "w", encoding="utf-8") as f:
              f.write("## üåê Webservice Blocklists\n\n")
              f.write("| Icon | Service | Link |\n")
              f.write("|------|---------|------|\n")
              for service, data in sorted(services):
                  icon_path = f"icons/{service}.svg"
                  icon_md = f'<img src="{icon_path}" width="20" height="20"/>' if os.path.exists(icon_path) else ""
                  f.write(f"| {icon_md} | {data.get('name', service)} | [{service}_asterisk.txt]({REPO_BASE}/webservices/{service}_asterisk.txt) |\n")

          # inject SERVICES.md into README.md
          readme = pathlib.Path("README.md").read_text(encoding="utf-8")
          marker_start, marker_end = "<!-- START:SERVICES -->", "<!-- END:SERVICES -->"
          table = pathlib.Path("SERVICES.md").read_text(encoding="utf-8")
          new = re.sub(f"{marker_start}.*?{marker_end}", f"{marker_start}\n{table}\n{marker_end}", readme, flags=re.DOTALL)
          pathlib.Path("README.md").write_text(new, encoding="utf-8")
          EOF

      - name: Commit & push if changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(services): refresh lists, icons, SERVICES.md (+entries, +checksums)"
          file_pattern: |
            webservices/*.txt
            icons/*.svg
            SERVICES.md
            README.md
            .checksums/*.sha256
