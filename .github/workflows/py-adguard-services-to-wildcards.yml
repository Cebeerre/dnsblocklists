name: Build AdGuard Webservices Wildcard for Blocky

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install pyyaml requests

      - name: Build lists, extract icons, write SERVICES.md and update README rows
        run: |
          import os, requests, yaml, hashlib, pathlib, re

          base_url = "https://raw.githubusercontent.com/AdguardTeam/HostlistsRegistry/main/services"
          repo_base = "https://Cebeerre.github.io/dnsblocklists"
          checksums_dir = pathlib.Path(".checksums")
          checksums_dir.mkdir(exist_ok=True)

          outdir = pathlib.Path("webservices")
          outdir.mkdir(exist_ok=True)
          icons_dir = pathlib.Path("icons")
          icons_dir.mkdir(exist_ok=True)

          services = []
          resp = requests.get("https://api.github.com/repos/AdguardTeam/HostlistsRegistry/contents/services")
          resp.raise_for_status()
          for entry in resp.json():
              if entry["name"].endswith(".yaml"):
                  services.append(entry["name"])

          table_rows = []
          for s in sorted(services):
              service_id = s.replace(".yaml", "")
              url = f"{base_url}/{s}"
              r = requests.get(url)
              r.raise_for_status()
              data = yaml.safe_load(r.text)

              # Calculate checksum
              sha256 = hashlib.sha256(r.text.encode("utf-8")).hexdigest()
              checksum_file = checksums_dir / f"{service_id}.sha256"

              if checksum_file.exists() and checksum_file.read_text() == sha256:
                  print(f"Skipping {service_id}, no changes.")
                  continue  # skip unchanged

              checksum_file.write_text(sha256)

              # Build .txt file
              txtfile = outdir / f"{service_id}_asterisk.txt"
              domains = []
              for rule in data.get("rules", []):
                  if rule.startswith("||") and rule.endswith("^"):
                      d = rule[2:-1]
                      if "." in d and not any(c in d for c in " /\\:*?\"'<>|"):
                          domains.append(f"*.{d}")
                  else:
                      # Skip unsupported
                      pass

              domains = sorted(set(domains))

              with open(txtfile, "w", encoding="utf-8") as f:
                  f.write("# Syntax: Domains Wildcard - Blocky (v0.23 or newer)\n")
                  f.write(f"# Title: {data.get('name','')}\n")
                  f.write("# Description: Converted from AdGuard HostlistsRegistry\n")
                  f.write("# Homepage: https://github.com/Cebeerre/dnsblocklists\n")
                  f.write("# License: MIT (same as wrapper repo)\n")
                  f.write(f"# Original Source: {url}\n")
                  f.write(f"# Entries: {len(domains)}\n")
                  f.write("#\n")
                  for d in domains:
                      f.write(d + "\n")

              print(f"Wrote {txtfile} ({len(domains)} entries)")

              # Write icon if exists
              icon_svg = data.get("icon_svg")
              if icon_svg:
                  with open(icons_dir / f"{service_id}.svg", "w", encoding="utf-8") as f:
                      f.write(icon_svg)

          # Generate SERVICES.md
          with open("SERVICES.md", "w", encoding="utf-8") as f:
              f.write("## üåê Webservice Blocklists\n\n")
              f.write("Blocklists targeting specific **web platforms and services**.\n")
              f.write("Automatically generated from [AdGuardTeam/HostlistsRegistry](https://github.com/AdguardTeam/HostlistsRegistry).\n")
              f.write("Each list is already in wildcard format for Blocky.\n\n")
              f.write("| Icon | Service | Link |\n")
              f.write("|------|---------|------|\n")
              for s in sorted(services):
                  service_id = s.replace(".yaml", "")
                  icon_path = f"icons/{service_id}.svg"
                  icon_md = f'<img src="{icon_path}" width="20" height="20"/>' if os.path.exists(icon_path) else ""
                  f.write(f"| {icon_md} | {service_id.capitalize()} | [{service_id}_asterisk.txt]({repo_base}/webservices/{service_id}_asterisk.txt) |\n")

          # Update README.md table rows
          readme_path = pathlib.Path("README.md")
          readme_text = readme_path.read_text(encoding="utf-8")
          marker_start = "<!-- START:SERVICES -->"
          marker_end = "<!-- END:SERVICES -->"
          new_table = pathlib.Path("SERVICES.md").read_text(encoding="utf-8")
          new_text = re.sub(f"{marker_start}.*?{marker_end}",
                            f"{marker_start}\n{new_table}\n{marker_end}",
                            readme_text,
                            flags=re.DOTALL)
          if new_text != readme_text:
              readme_path.write_text(new_text, encoding="utf-8")
              print("README: services table injected")
          else:
              print("README already up to date")

      - name: Commit & push if changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(services): refresh lists, icons, SERVICES.md (+entries)"
          file_pattern: "webservices/*.txt icons/*.svg SERVICES.md .checksums/*.sha256 README.md"
