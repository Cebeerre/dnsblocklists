name: Build AdGuard services -> wildcard lists (Python) + icons + SERVICES.md

on:
  schedule:
    - cron: "20 3 * * 1"   # weekly: Mon 03:20 UTC
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ORIG_SOURCE: https://github.com/AdguardTeam/HostlistsRegistry/tree/main
      TREE_API: https://api.github.com/repos/AdguardTeam/HostlistsRegistry/git/trees/main?recursive=1

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests PyYAML idna

      - name: Build lists, extract icons, write SERVICES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python - <<'PY'
          import os, re, sys, time, json, pathlib, textwrap
          import requests, yaml, idna
          from requests.adapters import HTTPAdapter, Retry

          REPO = os.environ.get("GITHUB_REPOSITORY", "")
          OWNER, _, NAME = REPO.partition("/")
          PAGES_BASE = f"https://{OWNER}.github.io/{NAME}"
          TREE_API   = os.environ["TREE_API"]
          ORIG_SOURCE= os.environ["ORIG_SOURCE"]
          TOKEN      = os.environ.get("GITHUB_TOKEN", "")

          out_dir  = pathlib.Path("webservices")
          icon_dir = pathlib.Path("icons")
          out_dir.mkdir(parents=True, exist_ok=True)
          icon_dir.mkdir(parents=True, exist_ok=True)

          TS = time.strftime("%Y%m%d%H%M", time.gmtime())

          # HTTP
          sess = requests.Session()
          retries = Retry(total=2, connect=2, read=2, backoff_factor=1,
                          status_forcelist=(429,500,502,503,504),
                          allowed_methods=frozenset(["GET","HEAD"]))
          adapter = HTTPAdapter(max_retries=retries, pool_connections=8, pool_maxsize=16)
          sess.mount("http://", adapter); sess.mount("https://", adapter)
          sess.headers.update({"User-Agent": "adguard-webservices-builder/1.7"})
          if TOKEN:
              sess.headers.update({"Authorization": f"Bearer {TOKEN}"})

          def api_get_json(url: str):
              r = sess.get(url, timeout=(5,20)); r.raise_for_status(); return r.json()

          def cdn_get_bytes(url: str) -> bytes:
              r = requests.get(url, timeout=(5,20)); r.raise_for_status(); return r.content

          # Domain validation (RFC-ish + IDNA)
          _label_re = re.compile(r"^[a-z0-9-]{1,63}$", re.IGNORECASE)
          def _is_valid_label(l: str) -> bool:
              return bool(l) and len(l)<=63 and l[0] != '-' and l[-1] != '-' and _label_re.fullmatch(l)
          def normalize_domain_ascii(d: str) -> str|None:
              d = d.strip().strip(".").lower()
              if not d or "://" in d or "/" in d or "_" in d or " " in d or "." not in d: return None
              try:
                  a = idna.encode(d, uts46=True, std3_rules=True).decode("ascii")
              except idna.IDNAError:
                  return None
              if len(a)>253: return None
              parts = a.split(".")
              if len(parts)<2 or not all(_is_valid_label(x) for x in parts): return None
              tld = parts[-1]
              if not (re.fullmatch(r"[a-z]{2,63}", tld) or re.fullmatch(r"xn--[a-z0-9-]{1,59}", tld)): return None
              return a
          def parse_rule_to_domain(s: str):
              s=s.strip()
              if not s or s.startswith("#") or s.startswith("@@"): return (None,"comment")
              if s.startswith("||"):
                  m=re.match(r"^\|\|([^,^|$]+)", s)
                  if not m: return (None,"malformed_double_pipe")
                  dom=m.group(1).strip().strip(".").lower()
                  if "*" in dom: return (None,"wildcard_inside_label")
                  a=normalize_domain_ascii(dom); return (a, None if a else "invalid")
              if s.startswith("|"): return (None,"single_pipe")
              if s.startswith("*."):
                  rest=s[2:].strip().strip(".").lower()
                  if "*" in rest: return (None,"wildcard_inside_label")
                  a=normalize_domain_ascii(rest); return (a, None if a else "invalid")
              plain=re.split(r"[,|$]", s, 1)[0].strip().strip(".").lower()
              if "*" in plain: return (None,"wildcard_inside_label")
              a=normalize_domain_ascii(plain); return (a, None if a else "invalid")

          # 1) One API call: list repo tree recursively; filter services/*.yml or *.yaml
          print("Listing services via git/treesâ€¦")
          tree = api_get_json(TREE_API)
          if tree.get("truncated"):
              print("WARN: tree listing is truncated by GitHub (very large repo).", file=sys.stderr)
          files = [t["path"] for t in tree.get("tree", []) if t.get("type")=="blob"]
          svc_paths = [p for p in files if p.startswith("services/") and (p.endswith(".yml") or p.endswith(".yaml"))]
          print(f"Service YAML files found: {len(svc_paths)}")

          upstream_sids=set(); services_count=0; icons_written=0

          # 2) Fetch each YAML via raw CDN
          for rel in sorted(svc_paths):
              raw_url=f"https://raw.githubusercontent.com/AdguardTeam/HostlistsRegistry/main/{rel}"
              name=rel.split("/")[-1]
              try: yml=yaml.safe_load(cdn_get_bytes(raw_url)) or {}
              except Exception as e:
                  print(f"WARN: YAML parse failed for {name}: {e}", file=sys.stderr); continue

              sid_raw=(yml.get("id") or yml.get("name") or "unknown")
              sname  =(yml.get("name") or yml.get("id") or "unknown")
              sid=re.sub(r"[^a-z0-9]+","_", str(sid_raw).lower()).strip("_") or "unknown"
              upstream_sids.add(sid); services_count+=1

              # icon_svg (per-service YAML)
              icon_svg=yml.get("icon_svg")
              if isinstance(icon_svg,str) and "<svg" in icon_svg.lower():
                  icon_path = icon_dir/f"{sid}.svg"
                  try:
                      icon_path.write_text(icon_svg.strip(), encoding="utf-8")
                      icons_written+=1
                      print(f"Wrote icon: {icon_path} ({len(icon_svg)} bytes)")
                  except Exception as e:
                      print(f"WARN: write icon {sid}: {e}", file=sys.stderr)
              else:
                  print(f"WARN: missing icon_svg in {name}")

              # rules â†’ domains
              rules=yml.get("rules") or []
              if not isinstance(rules,list): rules=[]
              domains=set(); skipped=[]
              for line in rules:
                  if not isinstance(line,str): continue
                  a,reason=parse_rule_to_domain(line)
                  if a: domains.add(a)
                  elif reason not in ("comment",): skipped.append(line)

              entries_count = len(domains)  # <-- count valid domains

              out_path=out_dir/f"{sid}_asterisk.txt"
              with out_path.open("w", encoding="utf-8") as f:
                  f.write(f"# Title: Blocklist for {sname}\n")
                  f.write(f"# Description: Blocks {sname} content (sourced from AdGuardTeam's HostlistsRegistry)\n")
                  f.write(f"# Homepage: https://github.com/{OWNER}/{NAME}\n")
                  f.write(f"# License: https://github.com/{OWNER}/{NAME}/blob/main/LICENSE\n")
                  f.write(f"# Version: {TS}\n")
                  f.write(f"# Original Source: {ORIG_SOURCE}\n")
                  f.write(f"# Syntax: Domains Wildcard - Blocky (v0.23 or newer)\n")
                  f.write(f"# Entries: {entries_count}\n")   # <-- restored
                  f.write("#\n")
                  if skipped:
                      f.write("# Skipped unsupported rules:\n")
                      for s in skipped: f.write(f"# Skipped unsupported rule: {s}\n")
                      f.write("#\n")
                  for d in sorted(domains):
                      f.write(f"*.{d}\n")

          print(f"Services processed: {services_count}, icons written: {icons_written}")

          # Hard guard: if we processed services but wrote zero icons, fail loudly
          if services_count > 0 and icons_written == 0:
              print("ERROR: processed services but wrote zero icons â€” investigate YAML parsing or paths.", file=sys.stderr)
              sys.exit(2)

          # 3) Sync deletions
          def sid_from_txt(p: pathlib.Path)->str: return p.name.removesuffix("_asterisk.txt")
          for p in list(out_dir.glob("*_asterisk.txt")):
              if sid_from_txt(p) not in upstream_sids:
                  print(f"Removing obsolete list: {p}"); p.unlink(missing_ok=True)
          for p in list(icon_dir.glob("*.svg")):
              if p.stem not in upstream_sids:
                  print(f"Removing obsolete icon: {p}"); p.unlink(missing_ok=True)

          # 4) Generate SERVICES.md (Icon | Name | Link)
          rows=[]
          for p in sorted(out_dir.glob("*_asterisk.txt")):
              sid=p.name.removesuffix("_asterisk.txt")
              name_pretty=re.sub(r"_+"," ", sid).title()
              pages_url=f"{PAGES_BASE}/webservices/{p.name}"
              icon_rel=f"icons/{sid}.svg"
              icon_md=f"![]({icon_rel})" if pathlib.Path(icon_rel).exists() else "â€”"
              link_md=f"[{p.name}]({pages_url})"
              rows.append((icon_md, name_pretty, link_md))

          md = []
          md.append("## ðŸ“‹ Webservices Blocklists\n")
          md.append("Automatically generated from AdGuard's HostlistsRegistry. Each list is already in wildcard format for Blocky.\n\n")
          md.append("| Icon | Name | Link |\n|------|------|------|\n")
          for icon,name,link in rows:
              md.append(f"| {icon} | {name} | {link} |\n")

          pathlib.Path("SERVICES.md").write_text("".join(md), encoding="utf-8")
          print(f"SERVICES.md written. Rows: {len(rows)}")
          PY

      - name: Commit & push if changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(services): refresh lists, icons, SERVICES.md (+entries)"
          add_options: "-A"   # force-add new files, but also catch deletions
